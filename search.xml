<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python 后端 django rest framework(简称 drf) 开发]]></title>
    <url>%2FAPP1%2Fapp1-2%2F</url>
    <content type="text"><![CDATA[python 后端 django rest framework(简称 drf) 开发 我这里只讲一些比较重要的难点，本人也是边学边开发的（codeing 是很快的，一半以上的时间都用来学习了）。 http 请求进程流程概况： http 请求 &lt;=&gt; urls.py 中配置转发 &lt;=&gt; views.py 对应处理类及方法 &lt;=&gt; serializers.py 对应处理类及方法 &lt;=&gt; DB 数据库按照这个流程开发即快速又高效，前后打通之后，分分钟就能完成一个功能模块的增删改查需求（真的是分分钟哦），请用 jwt 的身份认证，后台管理可以用 xadmin（目前只能支持 django2.0及以下版本），xadmin 模块的问题需要手动修复的。 models.py 基本使用，对应的数据库的表12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273from django.db import modelsfrom django.contrib.auth.models import AbstractUserclass UserAccount(AbstractUser): """ 用户账户信息模型 """ GENDER = (('man', u"男"), ('girl', "女"), ('null', "未知")) JOB = (('boos', u"老板"), ('white-collar', "白领"), ('worker', "打工"), ('student', "学生"), ('hobos', "无业游民")) USERACCOUNT_STATUS = ((0, u"失效"), (1, u"有效")) avatar = models.ImageField(upload_to="images/avatar/", null=True, blank=True, verbose_name="头像") bji = models.ImageField(upload_to="images/bji/", null=True, blank=True, verbose_name="背景图") username = models.CharField(max_length=16, unique=True, blank=False, verbose_name="昵称") id = models.AutoField(db_column='ID', primary_key=True) password = models.CharField(max_length=256, null=True, verbose_name="密码") mobile = models.CharField(max_length=11, unique=True, blank=False, verbose_name="手机号") gender = models.CharField(max_length=4, choices=GENDER, default='null', verbose_name="性别") job = models.CharField(max_length=12, choices=JOB, default='wuyeyoumin', verbose_name="职业属性") grade = models.PositiveIntegerField(default='0', verbose_name="等级") desc = models.TextField(max_length=15, verbose_name="个人简介") # 标准十五字 email = models.EmailField(max_length=254, verbose_name="邮箱") active_level = models.PositiveIntegerField(default=1, verbose_name="活跃度") status = models.PositiveIntegerField(default=1, choices=USERACCOUNT_STATUS, verbose_name="账号状态") follows = models.PositiveIntegerField(default=0, verbose_name="关注数") fans = models.PositiveIntegerField(default=0, verbose_name="粉丝数") updated = models.DateTimeField(auto_now=True, verbose_name="更新日期") class Meta: verbose_name = "用户账户" verbose_name_plural = verbose_name ordering = ("-date_joined",) def __str__(self): return self.username def all_valid(self): return UserAccount.objects.filter(status=1) def getValidUser(self, id): return UserAccount.objects.filter(id=id, status=1) # 活跃度 +1 def increase_active_level(self): self.active_level += 1 self.save(update_fields=['active_level', 'updated']) # 活跃度 -1 def lower_active_level(self): self.active_level -= 1 self.save(update_fields=['active_level', 'updated']) # 关注数 +1 def increase_follows(self): self.follows += 1 self.save(update_fields=['follows', 'updated']) # 关注数 -1 def lower_follows(self): self.follows -= 1 self.save(update_fields=['follows', 'updated']) # 粉丝数 +1 def increase_fans(self): self.fans += 1 self.save(update_fields=['fans']) # 粉丝数 -1 def lower_fans(self): self.fans -= 1 self.save(update_fields=['fans']) serializers.py 基本使用(serializers 使用方式比较繁多，也灵活，后续再写文章详细讲解)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133import timefrom rest_framework import serializersfrom rest_framework.validators import UniqueValidatorfrom django.contrib.auth import get_user_modelfrom rest_framework_jwt.settings import api_settingsfrom apps.util import VerifyCodeUtilUser = get_user_model()# 用户注册序列化 - 用户注册class UserRegisterSerializer(serializers.ModelSerializer): mobile = serializers.CharField( label="手机号", required=True, allow_blank=False, validators=[UniqueValidator(queryset=User.objects.filter(status=1), message="手机号已注册")]) code = serializers.CharField(required=True, write_only=True, max_length=4, min_length=4, label="验证码", error_messages=&#123; "blank": "请输入验证码", "required": "请输入验证码", "max_length": "验证码格式错误", "min_length": "验证码格式错误" &#125; ) username = serializers.CharField(read_only=True, label="用户名") # token = serializers.CharField(read_only=True, label="token") # username = serializers.CharField(label="用户名", required=False, # required=True, allow_blank=False, # validators=[UniqueValidator(queryset=User.objects.filter(status=1), # message="用户名已存在")]) # # password = serializers.CharField(min_length=6, max_length=16, label="密码", required=False, # required=True, # write_only=True, style=&#123;'input_type': 'password'&#125;, # error_messages=&#123;"min_length": "密码最少为6位", "max_length": "密码最多为16位"&#125; # ) def validate_code(self, code): # 验证码验证 VerifyCodeUtil.code_validate(serializers, self.initial_data["mobile"], self.initial_data["code"]) return code class Meta: model = User fields = ("id", "mobile", "code", "username") # , "token") # , "password") def create(self, validated_data): del validated_data["code"] # 新建用户不需要验证码 validated_data["username"] = validated_data["mobile"] # 用户名默认为手机号 user = super().create(validated_data) user.mobile = validated_data['mobile'] user.username = validated_data['mobile'] # 用户名默认为手机号 # user.set_password(validated_data["password"]) user.save() # 生成jtw # jwt_payload_handler = api_settings. # token = 'token' # user.token = token return user# 用户基本信息操作验证class UserInformationDetailSerializer(serializers.ModelSerializer): # _href = serializers.HyperlinkedIdentityField(view_name='importers-test-detail') class Meta: model = User fields = ("avatar", "bji", "gender", "job", "desc") def update(self, user, validated_data): if validated_data["avatar"]: user.avatar = validated_data["avatar"] if validated_data["bji"]: user.bji = validated_data["bji"] if validated_data["gender"]: user.gender = validated_data["gender"] if validated_data["desc"]: user.desc = validated_data["desc"] if validated_data["job"]: user.job = validated_data["job"] user.save() return user# 用户敏感信息操作验证class UserAccountDetailSerializer(serializers.ModelSerializer): mobile = serializers.CharField(label="手机号", required=False, validators=[UniqueValidator(queryset=User.objects.filter(status=1), message="手机号已注册")]) username = serializers.CharField(label="用户名", required=False, validators=[UniqueValidator(queryset=User.objects.filter(status=1), message="用户名已存在")]) password = serializers.CharField(min_length=6, max_length=16, required=False, label="密码", write_only=True, style=&#123;'input_type': 'password'&#125;, error_messages=&#123;"min_length": "密码最少为6位", "max_length": "密码最多为16位"&#125; ) code = serializers.CharField(required=True, write_only=True, max_length=4, min_length=4, label="验证码", error_messages=&#123; "blank": "请输入验证码", "required": "请输入验证码", "max_length": "验证码格式错误", "min_length": "验证码格式错误" &#125; ) class Meta: model = User fields = ("username", "email", "mobile", "password", "code") # def validate_mobile(self, mobile): # # 新手机号验证 # VerifyCodeUtil.mobile_validate(serializers, mobile) # return mobile def validate_code(self, code): # 验证码验证 VerifyCodeUtil.code_validate(serializers, self.instance.mobile, code) # del attrs["code"] return code def update(self, user, validated_data): if validated_data.get("mobile", ""): user.mobile = validated_data["mobile"] if validated_data.get("username", ""): user.username = validated_data["username"] if validated_data.get("email", ""): user.email = validated_data["email"] if validated_data.get("password", ""): user.set_password(validated_data["password"]) user.save() return user views.py 基本使用(views 使用方式比较繁多，也灵活，后续再写文章详细讲解)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127from django.contrib.auth.backends import ModelBackendfrom django.contrib.auth import get_user_modelfrom django.db.models import Qfrom rest_framework import mixins, permissionsfrom rest_framework import viewsetsfrom rest_framework.authentication import SessionAuthenticationfrom rest_framework.pagination import PageNumberPaginationfrom rest_framework.permissions import BasePermissionfrom rest_framework_jwt.authentication import JSONWebTokenAuthenticationfrom account.serializers import UserAccountDetailSerializer, SmsSerializer, UserRegisterSerializer, UserInformationDetailSerializerfrom util import VerifyCodeUtilUser = get_user_model()# 自定义用户验证规则 - 登录，用户名密码登录class ToLogin(ModelBackend): def authenticate(self, request, username=None, password=None, **kwargs): try: users = User.objects.filter(Q(username=username) | Q(mobile=username) | Q(email=username)).exclude(status=0) # django的后台中密码加密验证调用 check_password(self, raw_password): if users: for user in users: if user.check_password(password): return user except Exception as e: return None# 自定义用户验证规则 - 登录，手机号验证码登录class MobileToLogin(ModelBackend): # username 为手机号码，password 为验证码 def authenticate(self, request, username=None, password=None, **kwargs): try: if len(password) == 4: # 验证码验证 if VerifyCodeUtil.mobile_code_validate(username, password): users = User.objects.filter(mobile=username) if users: # 该手机号信息存在，返回有效用户信息 for user in users: if user.status == 1: return user else: # 该手机号信息不存在，创建用户信息并返回 ur_data = &#123;'mobile': username, 'code': password&#125; ur_i = UserRegisterSerializer(data=ur_data) if ur_i.is_valid(): return ur_i.create(ur_i.validated_data) except Exception as e: return None# 分页class BasePagination(PageNumberPagination): page_size = 2 page_size_query_param = 'page_size' page_query_param = "page" max_page_size = 100class UserRegisterViewset(mixins.ListModelMixin, mixins.CreateModelMixin, viewsets.GenericViewSet): """ 用户注册 """ serializer_class = UserRegisterSerializer # permission_classes = (permissions.IsAuthenticated, ) def get_permissions(self): if self.action == "list": return [permissions.IsAdminUser()] elif self.action == "create": return [] return [] def get_queryset(self): return User.objects.filter(status=1).order_by('-date_joined')# 用户基本信息操作class UserInformationViewSet(mixins.RetrieveModelMixin, mixins.UpdateModelMixin, viewsets.GenericViewSet): serializer_class = UserInformationDetailSerializer # permission_classes = (permissions.IsAuthenticated, ) # 标记需要进行jwt验证 authentication_classes = (JSONWebTokenAuthentication,) # , SessionAuthentication) # def get_permissions(self): # if self.action == "retrieve": # return [permissions.IsAuthenticated()] # elif self.action == "update": # return [permissions.IsAuthenticated()] # return [p() for p in self.permission_classes] # 重写该方法，不管传什么id，都只返回当前用户 def get_object(self): return self.request.user # def get_queryset(self): # return User.objects.filter(status=1).order_by('-date_joined')# 用户敏感信息操作class UserAccountViewSet(mixins.RetrieveModelMixin, mixins.UpdateModelMixin, viewsets.GenericViewSet): serializer_class = UserAccountDetailSerializer permission_classes = (permissions.IsAuthenticated, ) # def get_permissions(self): # if self.action == "list": # return [permissions.IsAdminUser()] # elif self.action == "retrieve": # return [permissions.IsAuthenticated()] # elif self.action == "update": # return [permissions.IsAuthenticated()] # return [permissions.IsAdminUser()] # 重写该方法，不管传什么id，都只返回当前用户 def get_object(self): return self.request.user # def get_queryset(self): # return User.objects.filter(status=1).order_by('-date_joined') urls.py 基本使用(urls 管理配置方式，这里只做参考)1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# ####### 赴梦网络from django.conf.urls import include, urlfrom django.urls import pathfrom rest_framework_jwt.views import obtain_jwt_token, refresh_jwt_token, verify_jwt_tokenfrom rest_framework import routersimport xadminfrom account.views import SmsCodeViewSet, UserRegisterViewset, UserInformationViewSet, UserAccountViewSetfrom security.views import PrivacyViewset, ProposalViewsetfrom region.views import UserRegionViewset, RegionViewsetrouter = routers.DefaultRouter()# 获取验证码router.register(r'code', SmsCodeViewSet, base_name='codes')# 用户注册router.register(r'register', UserRegisterViewset, base_name='register')# 用户基本信息操作router.register(r'userInfo', UserInformationViewSet, base_name='UserInfo')# 用户敏感信息操作router.register(r'userAccount', UserAccountViewSet, base_name='UserAccount')# 社区router.register(r'region', RegionViewset, base_name='Region')# 用户与社区router.register(r'userRegion', UserRegionViewset, base_name='UserRegion')# 隐私 隐私管理router.register(r'privacy', PrivacyViewset, base_name='Privacy')# 建议箱 我的建议router.register(r'proposal', ProposalViewset, base_name='Proposal')urlpatterns = [ # ADMIN URL 后台管理 # path('admin/', admin.site.urls), path("xadmin/", xadmin.site.urls), # 后台 api 查看测试 path("api/", include('rest_framework.urls', namespace='rest_framework')), # path("api-token-auth/", views.obtain_auth_token), # drf 自带的 token 认证 # jwt token 认证 path("api-token-auth/", obtain_jwt_token), # POST 获取令牌 # 登录获取令牌 path("api-token-refresh/", refresh_jwt_token), # 刷新令牌 可以“刷新” 未过期的令牌以获得具有更新到期时间的全新令牌 path("api-token-verify/", verify_jwt_token), # 验证令牌 在将受保护资源返回给用户之前等待JWT有效的确认 # 登录 path("login/", obtain_jwt_token), # 登录获取令牌 # API URLS # url("", include(router.urls)),] + router.urls # API URLS settings.py 基本使用(settings 配置比较繁多，这里只做参考，后续再写文章详细讲解)123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266# ####### 赴梦网络import osimport sysimport datetimeimport platformfrom django.utils.translation import ugettext_lazy as _# Build paths inside the project like this: os.path.join(BASE_DIR, ...)BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))# 导入资源包# sys.path.insert(0, os.path.join(BASE_DIR, "apps"))# sys.path.insert(1, os.path.join(BASE_DIR, "extra_apps"))# Quick-start development settings - unsuitable for production# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/# SECURITY WARNING: keep the secret key used in production secret!SECRET_KEY = '***************************************************'# 判断当前操作系统this_os = 'Windows' not in list(platform.uname())# SECURITY WARNING: don't run with debug turned on in production!# 运行模式 DEBUGDEBUG = this_osALLOWED_HOSTS = ['*']# Application definitionINSTALLED_APPS = [ 'django.contrib.admin', 'django.contrib.auth', 'django.contrib.contenttypes', 'django.contrib.sessions', 'django.contrib.messages', 'django.contrib.staticfiles', 'rest_framework', 'rest_framework.authtoken', 'corsheaders', 'extra_apps.xadmin', 'crispy_forms', 'reversion', 'account', 'base',]MIDDLEWARE = [ 'django.middleware.security.SecurityMiddleware', 'django.contrib.sessions.middleware.SessionMiddleware', 'django.middleware.common.CommonMiddleware', 'django.middleware.csrf.CsrfViewMiddleware', # 'django.contrib.auth.middleware.AuthenticationMiddleware', 'django.contrib.messages.middleware.MessageMiddleware', 'django.middleware.clickjacking.XFrameOptionsMiddleware', 'corsheaders.middleware.CorsMiddleware', # 设置浏览器跨域问题]ROOT_URLCONF = 'fmwl.urls'TEMPLATES = [ &#123; 'BACKEND': 'django.template.backends.django.DjangoTemplates', 'DIRS': [os.path.join(BASE_DIR, 'templates')] , 'APP_DIRS': True, 'OPTIONS': &#123; 'context_processors': [ 'django.template.context_processors.debug', 'django.template.context_processors.request', 'django.contrib.auth.context_processors.auth', 'django.contrib.messages.context_processors.messages', ], &#125;, &#125;,]WSGI_APPLICATION = 'fmwl.wsgi.application'# Database# https://docs.djangoproject.com/en/2.1/ref/settings/#databases# DATABASES = &#123;# # 'default': &#123;# # 'ENGINE': 'django.db.backends.sqlite3',# # 'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),# # &#125;# # &#125;# 使用 mysql 数据库DATABASES = &#123; 'default': &#123; 'ENGINE': 'django.db.backends.mysql', 'NAME': 'fmwl', 'USER': 'root', 'PASSWORD': 'root', 'HOST': '0-0.life', 'PORT': '3306', 'OPTIONS': &#123; 'init_command': "SET sql_mode='STRICT_TRANS_TABLES'", 'charset': 'utf8mb4', &#125;, &#125;&#125;# Password validation# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validatorsAUTH_PASSWORD_VALIDATORS = [ &#123; 'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator', &#125;, &#123; 'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator', &#125;, &#123; 'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator', &#125;, &#123; 'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator', &#125;,]# Internationalization# https://docs.djangoproject.com/en/2.1/topics/i18n/# LANGUAGE_CODE = 'en-us'LANGUAGE_CODE = 'zh-hans' # 语言LANGUAGES = ( ('en', _('English')), ('zh-hans', _('Chinese')),)# TIME_ZONE = 'UTC'TIME_ZONE = 'Asia/Shanghai' # 时区USE_I18N = TrueUSE_L10N = True# USE_TZ = TrueUSE_TZ = False# Static files (CSS, JavaScript, Images)# https://docs.djangoproject.com/en/2.1/howto/static-files/STATIC_URL = '/static/'# 静态文件 static 集成路径STATIC_ROOT = r'/home/fmwl/static_data/static/' if this_os else r'C:/Users/static_data/static/'STATICFILES_DIRS = ( os.path.join(BASE_DIR, 'static'), # 项目文件夹名称)AUTH_USER_MODEL = "account.UserAccount" # 自定义用户账户模型# login 自定义登录验证，配置多个时有一个验证通过即可AUTHENTICATION_BACKENDS = &#123; 'account.views.ToLogin', 'account.views.MobileToLogin',&#125;# 缓存过期时间REST_FRAMEWORK_EXTENSIONS = &#123; 'DEFAULT_CACHE_RESPONSE_TIMEOUT': 60 * 15&#125;LOGOUT_REDIRECT_URL = '/' # 缺省的跳转路径 - 登出后LOGIN_REDIRECT_URL = '/' # 缺省的跳转路径 - 登录后# 跨域CORS_ORIGIN_ALLOW_ALL = TrueCORS_ORIGIN_WHITELIST = ( "localhost:3000",)CORS_ALLOW_METHODS = ( 'GET', 'POST', 'PUT', 'PATCH', 'DELETE', 'OPTIONS')# JWT configREST_FRAMEWORK = &#123; 'DEFAULT_AUTHENTICATION_CLASSES': ( 'rest_framework.authentication.BasicAuthentication', 'rest_framework.authentication.SessionAuthentication', # 'rest_framework.authentication.TokenAuthentication', # 全局认证drf 自带的 'rest_framework_jwt.authentication.JSONWebTokenAuthentication', # 全局认证，开源 jwt ), 'DEFAULT_PERMISSION_CLASSES': ( # 允许的认证方式 'rest_framework.permissions.IsAuthenticated', # 已登录 # 'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly' # 未认证的只读 )&#125;# JWT_AUTH = &#123; # JWT_AUTH 默认配置# # see http://getblimp.github.io/django-rest-framework-jwt/# 'JWT_ENCODE_HANDLER':# 'rest_framework_jwt.utils.jwt_encode_handler',## 'JWT_DECODE_HANDLER':# 'rest_framework_jwt.utils.jwt_decode_handler',## 'JWT_PAYLOAD_HANDLER':# 'rest_framework_jwt.utils.jwt_payload_handler',## 'JWT_PAYLOAD_GET_USER_ID_HANDLER':# 'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler',## 'JWT_RESPONSE_PAYLOAD_HANDLER':# 'rest_framework_jwt.utils.jwt_response_payload_handler',## 'JWT_SECRET_KEY': SECRET_KEY,# 'JWT_GET_USER_SECRET_KEY': None,# 'JWT_PUBLIC_KEY': None,# 'JWT_PRIVATE_KEY': None,# 'JWT_ALGORITHM': 'HS256',# 'JWT_VERIFY': True,# 'JWT_VERIFY_EXPIRATION': True,# 'JWT_LEEWAY': 0,# 'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=300),# 'JWT_AUDIENCE': None,# 'JWT_ISSUER': None,## 'JWT_ALLOW_REFRESH': False, # 启用令牌刷新功能。发行的令牌rest_framework_jwt.views.obtain_jwt_token将有一个orig_iat字段# 'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),## 'JWT_AUTH_HEADER_PREFIX': 'JWT',# 'JWT_AUTH_COOKIE': None,## &#125;# 成功获取认证后返回的数据格式def jwt_response_payload_handler(token, user=None, request=None): data = &#123; "token": token, "id": user.id, "username": user.username, &#125; return dataJWT_AUTH = &#123; 'JWT_RESPONSE_PAYLOAD_HANDLER': jwt_response_payload_handler, # 成功获取认证后返回的数据格式 'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7), # 验证令牌时所使用的令牌的有效时间 'JWT_ALLOW_REFRESH': True, # 启用令牌刷新功能。发行的令牌rest_framework_jwt.views.obtain_jwt_token将有一个orig_iat字段 'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7), # 刷新令牌时所使用的旧令牌的有效时间 'JWT_AUTH_HEADER_PREFIX': 'JWT',&#125;]]></content>
      <categories>
        <category>APP1</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>django</tag>
        <tag>drf</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[赴梦网络]]></title>
    <url>%2Funcategorized%2Fapp1-1%2F</url>
    <content type="text"><![CDATA[赴梦网络 成立的意义：在你奔赴梦想的漫长路途中，帮助你知晓当下中国环境体系的价值观，协助你更快的前行完成你的梦想。 解决的社会问题：为那些正在迷茫的人，寻找他的方向，辅助他在奔赴梦想的漫长路途中前行。 理念：阐述事实现状，真诚，透明。 宗旨：节省你不必要浪费的时间，增加你的成就感。 理想结果：辅助解决社会存在的问题，促进社会人才培养，完善社会环境的良性循环。 实际结果：帮助那些迷茫的人，寻找自己的方向，改善自己所处环境，提高自己的能力，奔赴自己的梦想。 运营模式： 1 寻找迷茫的人 线上 APP/WEB 自助申请报名线下市场及学校调查与父母沟通为孩子申请报名用户推荐线上线下广告 2 帮助他寻找自己的方向 分析用户性格、喜好、环境、能力、想法等数据推荐喜好、环境、学习、工作等培养用户喜好、学习、能力、决策等用户选择推荐方案对接用户线上线下学习实施 3 辅助他奔赴自己的梦想 用户学习实施进度、问题、感想、想法等反馈辅助用户知晓提醒、互动、交流、助力、建议、习惯等的方式行为。 实施方案： WEB 网站开发（3 个月）（进行中） APP 应用开发（4 个月）（进行中） 用户可选择推荐的方案 - 线上资源（持续） 用户可选择推荐的方案 - 线下活动（持续） 给定条件：一阶段所需资金 90 万 公司起步资金 10 万 实施方案起步资金 20 万 模式完善资金 30 万 运营推广资金最低 30 万 二阶段所需资金 50 万 模式完善资金 30 万 运营推广资金 20 万]]></content>
  </entry>
  <entry>
    <title><![CDATA[更高效、更快速、更少资源的方式从 0 开发 APP]]></title>
    <url>%2FAPP%2Fapp1%2F</url>
    <content type="text"><![CDATA[更高效、更快速、更少资源的方式从 0 开发 APP 背景：经过许久的询问考察：找人代做成本太高（对，很穷），不好把控。并且没有找到愿意帮助我的小伙伴一起开发，自己也不会分身。所以决定硬着头皮自己开发，本人 java 三年，熟悉 python 当下自己的给定条件：两个月时间，一台电脑，一个我（当然我很多地方是不懂的，这都需要边学边做。） 第一步，先整理产品大纲文档，Visio图， 产品技术架构文档，功能明细文档， 这里简单介绍一下我的技术架构：开发语言当然选择快速高效的 python，数据库 mysql，后台架构 django rest framework(简称 drf)，APP 开发语言使用 dart 框架当然是 flutter。选型初衷是 快速，高效，方便的开发 APP 。关于他们的选择它们好处这里不多说了，自行百度即可。这里简单介绍一下我的功能明细： 社区，好友，消息，我的，金库，短视频等。 第二步，搭建环境，快速开发 APP 后台， 需要搭建的基本环境（这些安装都比较简单，请自行安装）：mysql-5.5 python3 pip django 主要开发工具（这些安装都比较简单，请自行安装）：Navicat pycharm Postman fiddler4 Xshell 6 Notepad++ Android Studio 首先介绍几个平台：LeanCloud一站式后端服务， Vulte云服务器， GitHub代码仓库（还有很多功能）， DockerHub镜像仓库（还有很多功能），Aliyun阿里云 LeanCloud一站式后端服务，如果你一穷二白，要求不高，那么前期选择 LeanCloud 是非常非常不错的。LeanCloud 官网介绍的很清楚，这里不说了。（这里我使用了双路实现以备不时之需。我还选择了 Vulte云服务器和自己搭建 mysql ，） Vulte云服务器，选择 Vulte 是因为很方便且比较便宜（最便宜的有2.5美元一个月的（有时候有））， GitHub作为开发的代码仓库，Webhooks 等。 DockerHub镜像仓库，作为服务器部署的镜像仓库，自动构建镜像，Webhooks 等。（关于服务器的开发部署及工具安装都是用的 Docker 进行部署及安装的） Aliyun阿里云，我这里只用了域名管理。其实阿里云上什么都有，但是对我来说还是有些贵（真的很穷），所以有些东西选择了别的平台的。 现在进行后端 django rest framework(简称 drf) 开发我这里只讲一些比较重要的难点，本人也是边学边开发的（codeing 是很快的，一半以上的时间都用来学习了）。 ##### ##### ##### 第二步，持续运营、维护、更新 APP，第三步，突出 APP 特点，丰富特点功能，打造该特点的社区，]]></content>
      <categories>
        <category>APP</category>
      </categories>
      <tags>
        <tag>APP</tag>
        <tag>开发APP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[一个有梦想的 idea]]></title>
    <url>%2F%E4%B8%80%E4%B8%AA%E6%9C%89%E6%A2%A6%E6%83%B3%E7%9A%84-idea%2Fapp%2F</url>
    <content type="text"><![CDATA[一个有梦想的 idea 是需要长久计划的，结合当下自己的给定条件进行实施。社会现状： 这些孩子没有得到当下社会他应该得到的基本服务保障。比如… 第一阶段，成就一个独特 APP 社区（），（计划 3 个月） 第一步，开发 APP， 由于当下自己的给定条件极其有限，所有决定自己从 0 开发，持续运营。那么问题来了，如何用当下自己一点点资源（一个脑袋），快速高效的开发出一款 APP 呢？ 更高效、更快速、更少资源的方式从 0 开发 APP 第二步，持续运营、维护、更新 APP， 第三步，突出 APP 特点，丰富特点功能，打造该特点的社区， 第二阶段，成就一个智能语音助手，（计划 3 个月） 第一步，开发语音助手软件（RNN （神经网络）养成计划）， 第二步，开发语音助手硬件（目前已有’小米小爱同学触屏版’）， 第三阶段，APP 与 智能语音助手的结合使用，（计划 3 个月） 第一步，结合使用的功能场景（逻辑提醒，选择提醒，生活生理指导，在线受教，就医指导，就业指导等）， 第二步，结合使用的功能场景的功能服务， 第三步，测试场景的功能服务，愿景（选择一个贫困的村庄，每家投放一个产品，记录下他们的生活方式，劳动成果，劳动价值，劳动特色，劳动潜能等。从而大数据分析出提高劳动价值的脱贫发展计划，）]]></content>
      <categories>
        <category>一个有梦想的 idea</category>
      </categories>
      <tags>
        <tag>梦想</tag>
        <tag>idea</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo]]></title>
    <url>%2FHexo%2FHexo%2F</url>
    <content type="text"><![CDATA[Hexo]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>博客搭建</category>
      </categories>
      <tags>
        <tag>npm</tag>
        <tag>hexo</tag>
        <tag>github</tag>
      </tags>
  </entry>
</search>
